local Finity = loadstring(game:HttpGet("https://raw.githubusercontent.com/YouCantCMe/Libraries/main/FinityUI"))()
local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/YouCantCMe/Libraries/main/ESP"))()

local FinityWindow = Finity.new(true,"Military Tycoon - Use right ctrl to toggle",true)
FinityWindow.ChangeToggleKey(Enum.KeyCode.RightControl)

local Main = FinityWindow:Category("Main")

--
shared.WalkSpeed = 16
shared.JumpPower = 16
shared.NoClip = false

shared.SilentAim = false
shared.Wallcheck = false
shared.ShowRay = false

--

local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local camera = game:GetService("Workspace").CurrentCamera

function notBehindWall(target)
    local ray = Ray.new(plr.Character.Head.Position, (target.Position - plr.Character.Head.Position).Unit * 5000)
    local part, position = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, {plr.Character}, false, true)
    if part then
        local humanoid = part.Parent:FindFirstChildOfClass("Humanoid")
        if not humanoid then
            humanoid = part.Parent.Parent:FindFirstChildOfClass("Humanoid")
        end
        if humanoid and target and humanoid.Parent == target.Parent then
            local pos, visible = camera:WorldToScreenPoint(target.Position)
            if visible then
                return true
            end
        end
    end
end

function getPlayerClosestToMouse()
    local target = nil
    local maxDist = 100
    for _,v in pairs(plrs:GetPlayers()) do
        if v.Character then
            if v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") and v.TeamColor ~= plr.TeamColor then
                local pos, vis = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                local dist = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(pos.X, pos.Y)).Magnitude
                if dist < maxDist and vis then
                    if shared.Wallcheck == true then
                        if notBehindWall(v.Character.Head) then
                            target = v.Character
                        end
                    else
                        target = v.Character
                    end
                    maxDist = dist
                end
            end
        end
    end
    return target
end


local gmt = getrawmetatable(game)
setreadonly(gmt,false)
local oldNamecall = gmt.__namecall
gmt.__namecall = newcclosure(function(self,...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "ShootEvent" and not checkcaller() then
        if shared.SilentAim == true then
            local target = getPlayerClosestToMouse()
            if target then
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = {target.Head} --can only hit the player head
                raycastParams.IgnoreWater = true
                
                -- Cast the ray
                local part = plr.Character:FindFirstChildOfClass("Tool").ToolModel.ShootPart --shoot part
                local origin = part.Position --shoot part pos
                local direction = (target.Head.Position - part.CFrame.p).unit * 5000 --toward at the head of the player
                local raycastResult = workspace:Raycast(origin, direction, raycastParams)
                if raycastResult then
                    args[1] = {raycastResult.Position} 
                    args[2] = {origin}
                    args[3] = {raycastResult.Instance}
                    args[4] = {raycastResult.Position}
                    args[5] = {raycastResult.Normal}
                    if shared.ShowRay == true then
                        local dist = (origin - raycastResult.Position).Magnitude
                        local part = Instance.new("Part")
                        part.Anchored = true
                        part.CanCollide = false
                        part.Color = Color3.fromRGB(255,255,255)
                        part.Size = Vector3.new(0.1, 0.1, dist)
                        part.CFrame = CFrame.new(origin, raycastResult.Position)*CFrame.new(0, 0, -(dist/2))
                        part.Transparency = 0.2
                        part.Material = Enum.Material.Neon
                        part.Parent = workspace
                        coroutine.wrap(function()
                            wait(1)
                            for i = 1,50 do
                                part.Transparency += 0.01
                                wait()
                            end
                            part:Destroy()
                        end)()
                    end
                end
            end
        end
        return self.FireServer(self, unpack(args))
    elseif method == "FireServer" and tostring(self) == "CC"  then
        return nil
  --  elseif method == "FireServer" and tostring(self) == "Died" and not checkcaller() then
  --      return nil
    end
    return oldNamecall(self,...)
end)

-- ui
function sendMessage(title,msg,dur)
    game.StarterGui:SetCore("SendNotification", {
        Title = title; 
        Text = msg;
        Duration = not dur and 4 or dur; 
    })
end

function changeHumanoidValue(values,value)
    if plr.Character then
        if plr.Character.PrimaryPart then
            for i, v in pairs(values) do
               plr.Character.Humanoid[i] = v
            end
        end
    end
end

function getPlayersTycoon(plr_)
    return tostring(plr_.Team),game:GetService("Workspace").Tycoons:FindFirstChild(tostring(plr_.Team))
end

local moving = false

function bypassTPAntiCheat()
    local char = plr.Character
    if char and char.PrimaryPart then
        local root = char.HumanoidRootPart
        char.Humanoid.PlatformStand = true 
        if not root:FindFirstChild("BodyGyro") then
            local bg = Instance.new("BodyGyro")
            bg.MaxTorque = Vector3.new(9e+09,9e+09,9e+09)
            bg.P = 90000
            bg.Parent = root
        end
        if not root:FindFirstChild("BodyVelocity") then
            local bv = Instance.new("BodyVelocity")
            bv.MaxForce = Vector3.new(9e+09,9e+09,9e+09)
            bv.P = 1250
            bv.Velocity = Vector3.new(0,0,0)
            bv.Parent = root
        end
    end
end

function removeAntiCheatBypass()
    local char = plr.Character
    if char and char.PrimaryPart then
        char.Humanoid.PlatformStand = false 
        local root = char.HumanoidRootPart
        root:FindFirstChild("BodyGyro"):Destroy()
        root:FindFirstChild("BodyVelocity"):Destroy()
    end
end


function goTo(cf,ret)
    local ts = game:GetService("TweenService")
    local uis = game:GetService("UserInputService")
    local char = plr.Character
    if char and char.PrimaryPart and not moving then
        moving = true
        bypassTPAntiCheat()
        local part = char.HumanoidRootPart
        local time = (char.PrimaryPart.Position-cf.p).Magnitude/375+(char.PrimaryPart.Position-cf.p).Magnitude/400
        local ti = TweenInfo.new(time, Enum.EasingStyle.Linear)
        local tp = {CFrame = cf}
        local t = ts:Create(part, ti, tp)
        t:Play()
        t.Completed:Connect(function()
            moving =false
            removeAntiCheatBypass()
            t:Destroy()
            if ret then
                return true
            end
        end)
    end
end

function Action(Object, Function) if Object ~= nil then Function(Object); end end

game:GetService("UserInputService").InputBegan:Connect(function(UserInput)
    if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        if plr.Character and plr.Character.PrimaryPart then
            if shared.NoClip == false and shared.InfiniteJumps == true then
                Action(plr.Character.Humanoid, function(self)
                    if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                        Action(plr.Character.HumanoidRootPart, function(self)
                            self.Velocity = Vector3.new(0, shared.JumpPower, 0);
                        end)
                    end
                end)
            end
        end
    end
end)


spawn(function()
    while wait(.1) do
        if plr.Character and plr.Character.PrimaryPart then
            if shared.WalkSpeed ~= 16 or shared.JumpPower ~= 50 then
                changeHumanoidValue({WalkSpeed = shared.WalkSpeed,JumpPower = shared.JumpPower})
            end
        end
    end
end)

local RunService = game:GetService("RunService")
local CharacterSetting = Main:Sector("Character Settings")

CharacterSetting:Cheat("Slider", "WalkSpeed", function(Value)
	shared.WalkSpeed = Value
end, {min = 16, max = 150,default = 16})

CharacterSetting:Cheat("Slider", "JumpPower", function(Value)
	shared.JumpPower = Value
end, {min = 50, max = 200,default = 50})

CharacterSetting:Cheat("Checkbox", "Infinite Jumps", function(State)
    shared.InfiniteJumps = State
end)
local AimbotSetting = Main:Sector("Aimbot Settings")

AimbotSetting:Cheat("Checkbox", "Silent Aim", function(State)
    shared.SilentAim = State
end)

AimbotSetting:Cheat("Checkbox", "Wall Check", function(State)
    shared.Wallcheck = State
end)

AimbotSetting:Cheat("Checkbox", "Vizualize Ray", function(State)
    shared.ShowRay = State
end)

-- esp


local ESPSetting = Main:Sector("ESP Settings")

ESP.Tracers = true
ESP.Names = true
ESP.Boxes = true
ESP.TeamColor = false

ESPSetting:Cheat("Checkbox", "ESP Enabled", function(State)
    ESP:Toggle(State)
end)

ESPSetting:Cheat("Checkbox", "Tracers", function(State)
    ESP.Tracers = State
end,{enabled = true})

ESPSetting:Cheat("Checkbox", "Name", function(State)
    ESP.Names = State
end,{enabled = true})

ESPSetting:Cheat("Checkbox", "Boxes", function(State)
    ESP.Boxes = State
end,{enabled = true})


ESPSetting:Cheat("Checkbox", "TeamColor", function(State)
    ESP.TeamColor = State
end)

-- teleports

local TPSettings = Main:Sector("Locations")

TPSettings:Cheat("Button", "Goto Tycoon", function()
    local tycoonName,tycoon = getPlayersTycoon(plr)
    goTo(tycoon.Essentials.SpawnLocation.CFrame+Vector3.new(0,3,0))
end)

TPSettings:Cheat("Label", "Your tycoon spawner locations")
TPSettings:Cheat("Button", "Goto Plane Spawn", function()
    local tycoonName,tycoon = getPlayersTycoon(plr)
    goTo(tycoon.Essentials.PlaneSpawn.CFrame+Vector3.new(0,3,0))
end)

TPSettings:Cheat("Button", "Goto Land Spawn", function()
    local tycoonName,tycoon = getPlayersTycoon(plr)
    goTo(tycoon.Essentials.LandSpawn.CFrame+Vector3.new(0,3,0))
end)

TPSettings:Cheat("Button", "Goto Water Spawn", function()
    local tycoonName,tycoon = getPlayersTycoon(plr)
    goTo(tycoon.Essentials.WaterSpawn.CFrame+Vector3.new(0,3,0))
end)

TPSettings:Cheat("Button", "Goto Air Spawn", function()
    local tycoonName,tycoon = getPlayersTycoon(plr)
    goTo(tycoon.Essentials.AirSpawn.CFrame+Vector3.new(0,3,0))
end)
TPSettings:Cheat("Label", "Control points")
for i = 1, 4 do
    local oilRig = workspace.ControlPoints:FindFirstChild("Oil Rig")
    oilRig.Name = "Rig "..i
end
TPSettings:Cheat("Dropdown", "Goto Oil Rig", function(Option)
    workspace.ControlPoints:FindFirstChild(Option).Flag.FlagPart.CanCollide = false
    goTo(workspace.ControlPoints:FindFirstChild(Option).Flag.FlagPart.CFrame+Vector3.new(0,3,0))
end, {
	options = {
		"Rig 1",
		"Rig 2",
        "Rig 3",
        "Rig 4"
	}
})
for i = 1, 4 do
    local outPost = workspace.ControlPoints:FindFirstChild("Outpost")
    outPost.Name = "Outpost "..i
end
TPSettings:Cheat("Dropdown", "Goto Outpost", function(Option)
    workspace.ControlPoints:FindFirstChild(Option).Flag.FlagPart.CanCollide = false
    goTo(workspace.ControlPoints:FindFirstChild(Option).Flag.FlagPart.CFrame+Vector3.new(0,3,0))
end, {
	options = {
		"Outpost 1",
		"Outpost 2",
        "Outpost 3",
        "Outpost 4"
	}
})


local MiscSetting = Main:Sector("Misc")
TPSettings:Cheat("Button", "Collect All Crates", function()
    local crates ={}
    for i, v in pairs(workspace:GetChildren()) do
        if v.Name == "Crate" and v:IsA("Model") and v:FindFirstChild("Hitbox") then
            table.insert(crates,v)
        end
    end
    sendMessage("Collecting Crates","Found "..#crates.." crate(s) to collect.",6)
    for i, v in pairs(crates) do
        local tpFinished = goTo(v.Box.CFrame+Vector3.new(0,3,0),true)
        repeat
             wait(.1)
        until tpFinished == true
        wait(.5)
        print("doing next crate now")
    end
end)

MiscSetting:Cheat("Button", "Load Infinite Yield", function(State)
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
end)

MiscSetting:Cheat("Label", "Script created by YouCantSeeMe#3434")
